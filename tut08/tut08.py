# -*- coding: utf-8 -*-
"""stock_cs_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lTXbGASSmF7QhM4EUXhDKwbVmfQ8OyhJ
"""

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd

stock_data=pd.read_csv("infy_stock.csv")

stock_data.shape

stock_data.sample(10)

print(stock_data.isnull().sum())

numerical_cols = stock_data.select_dtypes(include='number').columns
numerical_cols = numerical_cols.drop('Date_column', errors='ignore')

stock_data[numerical_cols] = stock_data[numerical_cols].fillna(stock_data[numerical_cols].mean())

print(stock_data.isnull().sum())

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Set the figure size
plt.figure(figsize=(10, 6))

# Plot the 'Closing Price' against 'Date'
plt.plot(stock_data['Date'], stock_data['Close'], label='Closing Price', color='blue')

# Add title and axis labels
plt.title('Closing Price Over Time')
plt.xlabel('Date')
plt.ylabel('Closing Price')

# Customize the x-axis to display dates year-wise
plt.gca().xaxis.set_major_locator(mdates.YearLocator())  # Display major ticks at yearly intervals
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))  # Format to show only the year

# Rotate the x-axis labels for better readability
plt.xticks(rotation=45)

# Add grid and legend
plt.grid(True)
plt.legend()

# Adjust layout to prevent overlap
plt.tight_layout()

# Show the plot
plt.show()

# pip install mplfinance

import pandas as pd
import mplfinance as mpf

# Load your dataset (replace with your actual file path)
stock_data = pd.read_csv("infy_stock.csv")

# Display the first few rows of the dataframe to understand the date format
print(stock_data.head())
print(stock_data['Date'].head(10))  # Check the first few dates

# Assuming the 'Date' column is in the format 'YYYY-MM-DD' (adjust as needed)
# Convert the 'Date' column to datetime format (change format if needed)
stock_data['Date'] = pd.to_datetime(stock_data['Date'], format='%Y-%m-%d', errors='coerce')

# Check for NaT (Not a Time) entries after conversion
print(f"NaT entries in Date: {stock_data['Date'].isna().sum()}")
stock_data.dropna(subset=['Date'], inplace=True)

# Set the 'Date' column as the DataFrame index
stock_data.set_index('Date', inplace=True)

# Check DataFrame info after processing
print(stock_data.info())
print(stock_data.head())  # Display updated DataFrame

# Ensure that the required columns are present and of the correct type
required_columns = ['Open', 'High', 'Low', 'Close']
for col in required_columns:
    if col not in stock_data.columns:
        print(f"Error: Column '{col}' not found in the dataset.")
    else:
        stock_data[col] = pd.to_numeric(stock_data[col], errors='coerce')

# Print the DataFrame types after conversion
print(stock_data[required_columns].dtypes)

# Now you can plot the candlestick chart using mplfinance
mpf.plot(stock_data, type='candle', style='charles', volume=True,
         title='Candlestick Chart - Stock Prices', ylabel='Price',
         ylabel_lower='Volume')

# Calculate the daily return percentage
stock_data['Daily_Return_Percentage'] = ((stock_data['Close'] - stock_data['Open']) / stock_data['Open']) * 100

# Reset the index to access 'Date' as a column
stock_data = stock_data.reset_index()

# Display the updated DataFrame
stock_data[['Date', 'Open', 'Close', 'Daily_Return_Percentage']].head()

# Calculate the average and median of daily returns
average_daily_return = stock_data['Daily_Return_Percentage'].mean()
median_daily_return = stock_data['Daily_Return_Percentage'].median()

print(f"Average Daily Return: {average_daily_return:.2f}%")
print(f"Median Daily Return: {median_daily_return:.2f}%")

# Calculate the standard deviation of closing prices
std_dev_closing_price = stock_data['Close'].std()

print(f"Standard Deviation of Closing Prices: {std_dev_closing_price:.2f}")

# Step 2: Calculate the 50-day and 200-day moving averages
stock_data['50_MA'] = stock_data['Close'].rolling(window=50).mean()
stock_data['200_MA'] = stock_data['Close'].rolling(window=200).mean()

# Step 3: Plot the Closing Prices along with 50-Day and 200-Day Moving Averages
plt.figure(figsize=(12,6))
plt.plot(stock_data['Date'], stock_data['Close'], label='Closing Price', color='blue', alpha=0.5)
plt.plot(stock_data['Date'], stock_data['50_MA'], label='50-Day MA', color='green')
plt.plot(stock_data['Date'], stock_data['200_MA'], label='200-Day MA', color='red')

# Add labels and title
plt.title('Stock Closing Price with 50-Day and 200-Day Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()

# Rotate date labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.show()

# Ensure that 'Date' is parsed as a datetime object for better plotting
stock_data['Date'] = pd.to_datetime(stock_data['Date'])

# Step 2: Calculate the 30-day rolling standard deviation (volatility)
stock_data['30_day_volatility'] = stock_data['Close'].rolling(window=30).std()

# Step 3: Plot the 30-day rolling standard deviation
plt.figure(figsize=(12,6))
plt.plot(stock_data['Date'], stock_data['30_day_volatility'], label='30-Day Rolling Volatility', color='orange')

# Add labels and title
plt.title('30-Day Rolling Volatility (Standard Deviation) of Stock Prices')
plt.xlabel('Date')
plt.ylabel('Volatility (Rolling Std Dev)')
plt.legend()

# Rotate date labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.show()

stock_data['Date'] = pd.to_datetime(stock_data['Date'])

# Step 2: Calculate the 50-day and 200-day moving averages
stock_data['50_MA'] = stock_data['Close'].rolling(window=50).mean()
stock_data['200_MA'] = stock_data['Close'].rolling(window=200).mean()

# Step 3: Identify bullish and bearish trends
# Bullish: 50_MA crosses above 200_MA
# Bearish: 50_MA crosses below 200_MA
stock_data['Bullish'] = stock_data['50_MA'] > stock_data['200_MA']
stock_data['Bearish'] = stock_data['50_MA'] < stock_data['200_MA']

# Step 4: Create signals for trend change
# Find the points where bullish or bearish trend changes occur
stock_data['Trend_Change'] = stock_data['Bullish'].ne(stock_data['Bullish'].shift())

# Step 5: Plot the data
plt.figure(figsize=(14,8))

# Plot closing prices
plt.plot(stock_data['Date'], stock_data['Close'], label='Closing Price', color='blue', alpha=0.5)

# Plot the 50-day and 200-day moving averages
plt.plot(stock_data['Date'], stock_data['50_MA'], label='50-Day MA', color='green')
plt.plot(stock_data['Date'], stock_data['200_MA'], label='200-Day MA', color='red')

# Mark bullish and bearish points
bullish_crossings = stock_data[stock_data['Bullish'] & stock_data['Trend_Change']]
bearish_crossings = stock_data[stock_data['Bearish'] & stock_data['Trend_Change']]

# Mark bullish (golden cross) events
plt.scatter(bullish_crossings['Date'], bullish_crossings['Close'], marker='^', color='green', label='Bullish (Golden Cross)', s=100)

# Mark bearish (death cross) events
plt.scatter(bearish_crossings['Date'], bearish_crossings['Close'], marker='v', color='red', label='Bearish (Death Cross)', s=100)

# Add labels and title
plt.title('Stock Price with Bullish and Bearish Trends (50-Day vs. 200-Day MA)')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()

# Rotate date labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.show()

